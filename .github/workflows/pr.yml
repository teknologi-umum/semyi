name: PR

on:
  pull_request:

jobs:
  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    container: node:20
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm run lint:check

      - name: Build
        run: pnpm run build

  backend:
    name: Backend / ${{ matrix.database.name }}
    runs-on: ubuntu-latest
    container: golang:1.24
    timeout-minutes: 30
    strategy:
      matrix:
        database:
          - name: "ClickHouse"
            url: "clickhouse://semyi:password@clickhouse:9000/default"
          - name: "DuckDB"
            url: "./test.duckdb"
    services:
      clickhouse:
        # According to the documentation: 
        # If jobs.<job_id>.services.<service_id>.image is assigned an empty string, the service will not start.
        image: ${{ matrix.database.name == 'ClickHouse' && 'clickhouse/clickhouse-server:latest' || '' }}
        env:
          CLICKHOUSE_DB: default
          CLICKHOUSE_USER: semyi
          CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
          CLICKHOUSE_PASSWORD: password
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 30s
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup gcc
        run: apt-get update && apt-get install -y build-essential

      - name: Build
        run: go build -buildvcs=false .
        working-directory: ./backend

      - name: Test
        run: go test -v -coverprofile=coverage.out -covermode=atomic ./...
        working-directory: ./backend
        env:
          DATABASE_URL: ${{ matrix.database.url }}

      - uses: codecov/codecov-action@v5
        with:
          files: ./backend/coverage.out
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t semyi:latest .
